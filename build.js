#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Read .env file
function loadEnv() {
    const envPath = path.join(__dirname, '.env');

    if (!fs.existsSync(envPath)) {
        console.error('‚ùå .env file not found!');
        console.log('üìù Please create a .env file with:');
        console.log('GOOGLE_CLIENT_ID=your_client_id.apps.googleusercontent.com');
        console.log('GOOGLE_CLIENT_SECRET=your_client_secret');
        console.log('GOOGLE_REDIRECT_URI=https://YOUR_EXTENSION_ID.chromiumapp.org/');
        process.exit(1);
    }

    const envContent = fs.readFileSync(envPath, 'utf8');
    const env = {};

    envContent.split('\n').forEach(line => {
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length > 0) {
            env[key.trim()] = valueParts.join('=').trim().replace(/['"]/g, '');
        }
    });

    return env;
}

// Update manifest.json with environment variables
function updateManifest(env) {
    const manifestPath = path.join(__dirname, 'extension', 'manifest.json');
    const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));

    // Update OAuth client ID
    if (env.GOOGLE_CLIENT_ID) {
        manifest.oauth2.client_id = env.GOOGLE_CLIENT_ID;
        console.log('‚úÖ Updated OAuth client ID in manifest');
    } else {
        console.error('‚ùå GOOGLE_CLIENT_ID not found in .env');
        return false;
    }

    // Write updated manifest
    fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
    console.log('‚úÖ Manifest updated successfully!');
    return true;
}

// Create config.js for runtime access
function createConfig(env) {
    const configContent = `// Auto-generated config from .env
// Do not edit this file directly - it will be overwritten by build.js

window.MOMENTUM_CONFIG = {
  GOOGLE_CLIENT_ID: "${env.GOOGLE_CLIENT_ID || ''}",
  GOOGLE_REDIRECT_URI: "${env.GOOGLE_REDIRECT_URI || ''}",
  // Note: CLIENT_SECRET is not included for security (not needed in client-side extensions)
};

console.log("[Momentum] Configuration loaded");
`;

    const configPath = path.join(__dirname, 'extension', 'config.js');
    fs.writeFileSync(configPath, configContent);
    console.log('‚úÖ Config file created');
}

// Main build process
function main() {
    console.log('üöÄ Building Momentum extension...\n');

    try {
        const env = loadEnv();
        console.log('üìÅ Environment variables loaded');
        console.log(`   GOOGLE_CLIENT_ID: ${env.GOOGLE_CLIENT_ID ? env.GOOGLE_CLIENT_ID.substring(0, 20) + '...' : 'NOT SET'}`);
        console.log(`   GOOGLE_REDIRECT_URI: ${env.GOOGLE_REDIRECT_URI || 'NOT SET'}`);

        if (updateManifest(env)) {
            createConfig(env);
            console.log('\n‚ú® Build complete! Your extension is ready to load.');
            console.log('\nüìã Next steps:');
            console.log('1. Go to chrome://extensions/');
            console.log('2. Enable Developer mode');
            console.log('3. Click "Load unpacked"');
            console.log('4. Select the "extension" folder');
            console.log('5. Copy the Extension ID and update GOOGLE_REDIRECT_URI in .env if needed');
        }
    } catch (error) {
        console.error('‚ùå Build failed:', error.message);
        process.exit(1);
    }
}

main();
